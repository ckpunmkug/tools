#!/usr/bin/php
<?php

define('VENDOR', 'ckpunmkug');
define('PROJECT', 'browser');

set_include_path(__DIR__.'/../include');
require_once('class/Args.php');

if(true) // configure Args handlers
{//{{{//

	Args::$description = "CLI Toolkit";
	
	Args::add([
		"-C", "--component", "<name>", "Component name",
		function ($string) {
			define("COMPONENT", $string);
		}, false
	]);
	
	Args::add([
		"-A", "--action", "<name>", "Action name",
		function ($string) {
			define("ACTION", $string);
		}, false
	]);
	
	Args::add([
		"-D", "--data", "<string>", "String with data",
		function ($string) {
			define("DATA", $string);
		}, false
	]);
	
	Args::apply();
	

}//}}}//

if(true) // define HOME, require config.php
{//{{{//
	
	$return = getenv('HOME', true);
	if(!is_string($return)) {
		trigger_error("Can't get 'HOME' environment", E_USER_ERROR);
		exit(255);
	}
	define('HOME', $return);
	
	$file = HOME.'/.config/'.VENDOR.'/'.PROJECT.'/config.php';
	if(true) // check file
	{//{{{//
	
		$return = file_exists($file);
		if(!$return) {
			if (defined('DEBUG') && DEBUG) var_dump(['config file' => $file]);
			trigger_error("Config file does not exists", E_USER_ERROR);
			exit(255);
		}
		
		$return = is_file($file);
		if(!$return) {
			if (defined('DEBUG') && DEBUG) var_dump(['config file' => $file]);
			trigger_error("Config file is not regular file", E_USER_ERROR);
			exit(255);
		}
		
		$return = is_readable($file);
		if(!$return) {
			if (defined('DEBUG') && DEBUG) var_dump(['config file' => $file]);
			trigger_error("Config file is not readable", E_USER_ERROR);
			exit(255);
		}	
		
	}//}}}//
	require_once($file);
	
	$return = defined('CONFIG');
	if(!$return) {
		if (defined('DEBUG') && DEBUG) var_dump(['config file' => $file]);
		trigger_error("'CONFIG' constant does not defined in config file", E_USER_ERROR);
		exit(255);
	}
	
}//}}}//

if(true) // Components and actions routing
{//{{{//
	
	if(defined('COMPONENT') && COMPONENT == 'server')
	{//{{{//
		if(defined('VERBOSE') && VERBOSE) {
			user_error("Launching component 'server'");
		}
		
		require_once('component/server.php');
		if(!(
			isset(CONFIG["component"]["server"])
			&& is_array(CONFIG["component"]["server"])
		)) {
			trigger_error('Incorrect array CONFIG["component"]["server"]', E_USER_ERROR);
			exit(255);
		}
		$return = server::main(CONFIG["component"]["server"]);
		if(!$return) {
			trigger_error("Main call of component 'server' returned an error", E_USER_ERROR);
			exit(255);
		}
		
		exit(0);
	}//}}}//
	
}//}}}//

exit(255);

